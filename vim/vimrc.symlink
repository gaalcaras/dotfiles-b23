" ############################
"
" vimrc by @gaalcaras
"
" Meant to be used with NeoVim
" Autoload functions --> $HOME/.dotfiles/vim/dotfiles.vim

scriptencoding utf8

if has('nvim')
  set runtimepath+=/usr/share/vim/vimfiles
endif

if has('autocmd')
  filetype plugin indent on
endif

if has('syntax') && !exists('g:syntax_on')
  syntax enable
endif

" ================
" General settings
" ================

let g:maplocalleader = ';'
let g:mapleader = ','

set foldmethod=syntax
set foldlevelstart=99
set splitright " Open splits on the right
set splitbelow " Open splits on the bottom
set wildignore=*.pdf,*.aux,*.png,*.pyc
set wildmode=longest,list,full
set modeline

set linebreak " Wrap lines smartly (not always in the middle of a word)
set nolist " Disable list (otherwise, breaks linebreak)
set formatoptions=qrn1tj " Add options for wrapping (see help for details)
silent! set breakindent showbreak=.. " Visually show soft breaks

set list listchars=tab:»·,trail:·,nbsp:· " Display extra whitespace
set shiftwidth=2 tabstop=2 softtabstop=2 expandtab
set autoindent

set termguicolors

" Relative numbers
set relativenumber
set number
if has('nvim')
  au TermOpen * setlocal nonumber norelativenumber " Not in the terminal tho
endif

set cursorline

" Lowercase is case sensitive, upper case is not
set ignorecase
set smartcase

" Get rid of additionnal files
set nobackup
set nowritebackup
set noswapfile
set undofile
set undodir=~/.vim/undodir " But persistent undo is pretty rad

set nrformats-=octal " Do not consider number beginning with 0 as octal
set scrolloff=1 " Always show at least one line above or below current line
set sidescrolloff=5 " Keep 5 columns to the right or left of cursor
set linespace=3 " Prefer a slightly higher line height
set spell spelllang=fr,en " Enable both French and English spell check
set mouse-=a " Disable mouse visual mode

" Underline spell check results
hi clear SpellBad
hi SpellBad cterm=underline

set path+=** " Make file search recursive in dirs and subdirs

let g:netrw_banner=0 " Disable annoying banner
let g:netrw_browse_split=4 " Open in prior window
let g:netrw_altv=1 " Open splits to the right

" Tree view
let g:netrw_liststyle=3
let g:netrw_list_hide=netrw_gitignore#Hide()
let g:netrw_list_hide.=',\(^\|\s\s\)\zs\.\S\+'

" Keep selection when changing indentation in visual mode
vnoremap < <gv
vnoremap « <gv
vnoremap > >gv
vnoremap » >gv

" Auto save buffers
augroup AutoSaveBuffers
  autocmd!

  autocmd! BufLeave,InsertLeave,CursorHold * silent! :w
  autocmd! FocusLost,FocusGained * silent! :wa
augroup END

" ==================================
" Personal mappings and text objects
" ==================================

" Show next matched string at the center of screen
nnoremap n nzzzO
nnoremap N NzzzO

" Escape from inside [], (), {}, «», '', "", **
inoremap <c-e> <esc>/[)}*"»'`\]*]<cr>:nohl<cr>a
nnoremap <c-e> /[)}*"»'`\]*]<cr>:nohl<cr>a

" Easier tag navigation
nnoremap <c-g> <c-]>
vnoremap <c-g> <c-]>

" Spelling errors
nnoremap )s ]s
nnoremap (s [s

nnoremap gf :w<cr>gf
" Open file under cursor in vertical split
nnoremap g<cr> :w<cr><c-w>vgf
" Open file under cursor in horizontal split
nnoremap g<space> :w<cr><c-w>f

" Append the line above to the end
nnoremap <leader>tt :m-2<cr>:j<cr>
" Delete everything right of the cursor and paste it in a new line
" line above, then delete beginning and trailing whitespaces
nnoremap <leader>ts DO<Esc>p:.s/^\s\+//<cr>:+1<cr>:.s/\s\+$//<cr>:nohl<cr>$
" Add a line of = below
nnoremap <leader>= yyp:s/./=/g<cr>:noh<cr>
" Add a line of - below
nnoremap <leader>- yyp:s/./-/g<cr>:noh<cr>
" Align with spaces
nnoremap <leader>$ :call dotfiles#AlignWithSpaces(78)<cr>

" Open fuzzy file search
nnoremap <leader>, :FZF<cr>
" " Open fuzzy buffer search
nnoremap <leader>b :Buffers<cr>
nnoremap <leader>c :Commits<cr>

" " Edit vimrc
nnoremap <leader>ve :edit ~/.dotfiles/vim/vimrc.symlink<cr>
" Reload vimrc
nnoremap <leader>vr :w<cr>:source $MYVIMRC<cr>

" Clear highlighted search results
nnoremap <silent> <c-L> :nohlsearch<cr>

" Sorry ExMode, but you've gotta go
map q: <Nop>
nnoremap Q <nop>

" Add new text objects delimited by :
call dotfiles#DefineNewTextObjects([ '_', '.', ':', ',', ';', '<bar>', '/',
      \ '<bslash>', '*', '+', '%', '-', '#' ])

" When in quickfix buffer (grep, errors, vim-notes), go to error under cursor
autocmd BufReadPost quickfix nnoremap <buffer> <CR> <CR>

" ========
" vim-plug
" ========

call plug#begin('~/.vim/plugged')

" Language related plugins
" ------------------------

" Markdown
Plug 'euclio/vim-markdown-composer', {'do':function('dotfiles#BuildComposer'),
      \ 'for' : 'markdown' }
Plug 'plasticboy/vim-markdown', { 'for': 'markdown' }
Plug 'mzlogin/vim-markdown-toc', { 'for': 'markdown' }
Plug 'junegunn/goyo.vim', { 'for': ['markdown', 'tex'] } " Focused writing

" Python
Plug 'tmhedberg/simpylfold', { 'for': 'python' } " Adequate Python folding
Plug 'Vimjas/vim-python-pep8-indent', { 'for': 'python' }
Plug 'bfredl/nvim-ipy', { 'for': 'python', 'do': ':UpdateRemotePlugins' }

" Other programming languages
Plug 'pangloss/vim-javascript', { 'for': ['javascript', 'typescript'] }
Plug 'lervag/vimtex', { 'for': ['latex', 'tex', 'rnoweb'] }
Plug 'jalvesaq/Nvim-R', { 'for': ['r', 'markdown', 'rmd', 'rnoweb', 'rrst'] }
Plug 'Shougo/neco-vim', { 'for': ['vim', 'markdown'] }
Plug 'tpope/vim-endwise', { 'for': ['ruby', 'vim', 'lua'] }

" Language completion and syntax checking
Plug 'w0rp/ale' " Check style and syntax asynchronously
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

Plug 'fatih/vim-go'

Plug 'neoclide/coc.nvim', {'branch': 'release'}

Plug 'roxma/nvim-completion-manager', { 'on': [] }
Plug 'ncm2/ncm2', { 'for': ['r', 'rmd'] }

Plug 'roxma/nvim-yarp', { 'for': ['r', 'rmd'] }

if !has('nvim')
  Plug 'roxma/vim-hug-neovim-rpc', { 'for': ['r', 'rmd'] }
endif

Plug 'ncm2/ncm2-markdown-subscope', { 'for': ['r', 'rmd'] }

" General functionnality
" ----------------------

Plug 'tpope/vim-repeat'
Plug 'neomutt/neomutt.vim'
Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'
Plug 'xtal8/traces.vim' " Range and pattern preview for Ex commands
Plug 'ludovicchabant/vim-gutentags'

if exists('$TMUX')
  Plug 'tmux-plugins/vim-tmux-focus-events'
endif

" Give vim some note taking abilities
Plug 'xolox/vim-misc'
Plug 'xolox/vim-notes'

" Git
Plug 'tpope/vim-fugitive'
Plug 'jreybert/vimagit'
Plug 'airblade/vim-gitgutter'

" Colors and appearance
Plug 'lifepillar/vim-solarized8'

" Improve text editing
" --------------------

Plug 'machakann/vim-sandwich'
Plug 'ConradIrwin/vim-bracketed-paste' " Set 'set:paste' in insert mode
Plug 'scrooloose/nerdcommenter'
Plug 'raimondi/delimitmate' " Handle delimiters automatically
Plug 'tpope/vim-abolish' " Add improved support for abbreviations
Plug 'junegunn/vim-easy-align'
Plug 'yangmillstheory/vim-snipe'
Plug 'Yggdroot/indentLine'

" My own plugins
" --------------

Plug '~/Codecave/ncm-R', { 'for': ['r', 'rmd'] }

if has('nvim')
  Plug '~/Codecave/typit-learn'
  Plug '~/Codecave/transcribe.nvim', { 'for': ['text', 'markdown'] }
endif

call plug#end() " Add plugins to &runtimepath

" =================
" Custom statusline
" =================

set statusline=
set statusline+=%1*\ %{fugitive#Head()}\ " Git head (color User1)
set statusline+=%#CursorLineNr#\ %f\ " File name (normal color)

" Right side of statusline
set statusline+=%=
set statusline+=%{&fileencoding?&fileencoding:&encoding}\ " file encoding
set statusline+=%1*\ %{&filetype}\ " File type (color User1)
set statusline+=%2*\ %l:%c\ (%P)" cursor position (color User2)

" ==================
" French bépo layout
" ==================

" Text objects
noremap é w
noremap É W
onoremap aé aw
onoremap aÉ aW
onoremap ié iw
onoremap iÉ iW

" Easier pane navigation
noremap w <C-w>
noremap W <C-w><C-w>
noremap wt <C-w>j
noremap ws <C-w>k
noremap wc <C-w>h
noremap wr <C-w>l
noremap wd <C-w>c
noremap wo <C-w>s
noremap wp <C-w>o
noremap w<SPACE> :split<CR>
noremap w<CR> :vsplit<CR>

" [HJKL] -> {CTSR}
noremap c h
noremap r l
noremap t j
noremap s k
noremap C H
noremap R L
noremap gs gk
noremap gt gj
noremap gb gT
noremap gé gt
noremap g" g0

" {JK} -> {TS}
noremap T J
noremap S K

" Screen shifting
noremap zs zb
noremap zt zt

" {J}
noremap j t
noremap J T

" {L}
noremap l c
noremap L C

" {H}
noremap h r
noremap H R

" {K}
noremap k s
noremap K S

" Indentation
noremap « <
noremap » >

" Netwr
augroup netrw_mapping
  autocmd!
  autocmd filetype netrw call NetrwMapping()
augroup END

function! NetrwMapping()
  noremap <buffer> c h
  noremap <buffer> r l
  noremap <buffer> t j
  noremap <buffer> s k
endfunction

" ========
" Hardmode
" ========

command! ToggleDisablingOfNonCountedBasicMotions
      \ :call dotfiles#ToggleDisablingOfBasicMotionsIfNonCounted()
command! DisableNonCountedBasicMotions
      \ :call dotfiles#SetDisablingOfBasicMotionsIfNonCounted(1)
command! EnableNonCountedBasicMotions
      \ :call dotfiles#SetDisablingOfBasicMotionsIfNonCounted(0)

augroup hardmode
  autocmd!
  autocmd VimEnter * DisableNonCountedBasicMotions
augroup END

" Never use arrow keys ;-)
noremap <Left> :echoe "Use c ;-)"<CR>
noremap <Right> :echoe "Use r ;-)"<CR>
noremap <Up> :echoe "Use s ;-)"<CR>
noremap <Down> :echoe "Use t ;-)"<CR>

" Say goodbye to backspace and delete in Insert mode
inoremap <BS> <Nop>
inoremap <Del> <Nop>

" Syntax highlighting
" Exclude capitalized nouns.
syn match myExCapitalWords +\<[A-Z]\w*\>+ contains=@NoSpell
