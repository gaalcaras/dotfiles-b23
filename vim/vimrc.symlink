" ############################
" vimrc by @gaalcaras
"
" Meant to be used with NeoVim
" Autoload functions --> $HOME/.dotfiles/vim/dotfiles.vim

scriptencoding utf8

if has('nvim')
  set runtimepath+=/usr/share/vim/vimfiles
endif

if has('autocmd')
  filetype plugin indent on
endif

if has('syntax') && !exists('g:syntax_on')
  syntax enable
endif


" ================
" General settings
" ================

let g:maplocalleader = ';'
let g:mapleader = ','

set foldmethod=syntax
set foldlevelstart=1
set splitright " Open splits on the right
set wildignore=*.pdf,*.aux,*.png,*.pyc
set wildmode=longest,list,full
set modeline

set linebreak " Wrap lines smartly (not always in the middle of a word)
set nolist " Disable list (otherwise, breaks linebreak)
set formatoptions=qrn1t " Add options for wrapping (see help for details)
silent! set breakindent showbreak=.. " Visually show soft breaks

set list listchars=tab:»·,trail:·,nbsp:· " Display extra whitespace
set shiftwidth=2 tabstop=2 softtabstop=2 expandtab
set smartindent " Indent sanely

" Relative numbers
set relativenumber
set number
au TermOpen * setlocal nonumber norelativenumber " Not in the terminal tho

" Lowercase is case sensitive, upper case is not
set ignorecase
set smartcase

" Get rid of additionnal files
set nobackup
set nowritebackup
set noswapfile
set undofile
set undodir=~/.vim/undodir " But persistent undo is pretty rad

set nrformats-=octal " Do not consider number beginning with 0 as octal
set scrolloff=1 " Always show at least one line above or below current line
set sidescrolloff=5 " Keep 5 columns to the right or left of cursor
set linespace=3 " Prefer a slightly higher line height
set spell spelllang=fr,en " Enable both French and English spell check
set mouse-=a " Disable mouse visual mode

" Underline spell check results
hi clear SpellBad
hi SpellBad cterm=underline

set path+=** " Make file search recursive in dirs and subdirs

let g:netrw_banner=0 " Disable annoying banner
let g:netrw_browse_split=4 " Open in prior window
let g:netrw_altv=1 " Open splits to the right

" Tree view
let g:netrw_liststyle=3
let g:netrw_list_hide=netrw_gitignore#Hide()
let g:netrw_list_hide.=',\(^\|\s\s\)\zs\.\S\+'

" Auto save buffers
autocmd! BufLeave,InsertLeave,CursorHold * silent! :w
autocmd! FocusLost,FocusGained * silent! :wa

" ==================================
" Personal mappings and text objects
" ==================================

" Get away from inside [], (), {}, «», '', "", **
inoremap <c-g> <esc>/[)}*"»'`\]*]<cr>:nohl<cr>a
nnoremap <c-g> /[)}*"»'`\]*]<cr>:nohl<cr>a

" Easier tag navigation
nnoremap <c-m> <c-]>
vnoremap <c-m> <c-]>

nnoremap gf :w<cr>gf
" Open file under cursor in vertical split
nnoremap g<cr> :w<cr><c-w>vgf
" Open file under cursor in horizontal split
nnoremap g<space> :w<cr><c-w>f

nnoremap <c-s> :w<cr>
inoremap <c-s> <c-o>:w<cr>

" Append the line above to the end
nnoremap <leader>tt :m-2<cr>:j<cr>
" Delete everything right of the cursor and paste it in a new line
" line above, then delete beginning and trailing whitespaces
nnoremap <leader>ts DO<Esc>p:.s/^\s\+//<cr>:+1<cr>:.s/\s\+$//<cr>$
" Add a line of = below
nnoremap <leader>= yyp:s/./=/g<cr>:noh<cr>
" Add a line of = below
nnoremap <leader>- yyp:s/./-/g<cr>:noh<cr>
" Align with spaces
nnoremap <leader>$ :call dotfiles#AlignWithSpaces(78)<cr>

" Open fuzzy file search
nnoremap <leader>, :Denite file_rec<cr>
" Open fuzzy buffer search
nnoremap <leader>b :Denite buffer<cr>
nnoremap <leader><cr> :vsplit<cr> :Denite file_rec<cr>
" Edit vimrc
nnoremap <leader>ve :edit ~/.dotfiles/vim/vimrc.symlink<cr>
" Reload vimrc
nnoremap <leader>vr :w<cr>:source $MYVIMRC<cr>

" Clear highlighted search results
nnoremap <silent> <c-L> :nohlsearch<cr>
nnoremap <silent> <localleader>B :call dotfiles#ToggleSolarizedDarkTheme()<cr>

" Sorry ExMode, but you've gotta go
map q: <Nop>
nnoremap Q <nop>

" Add new text objects delimited by :
call dotfiles#DefineNewTextObjects([ '_', '.', ':', ',', ';', '<bar>', '/',
                          \ '<bslash>', '*', '+', '%', '-', '#' ])

" ========
" vim-plug
" ========

call plug#begin('~/.vim/plugged')

function! BuildComposer(info)
  if a:info.status !=# 'unchanged' || a:info.force
    if has('nvim')
      !cargo build --release
    else
      !cargo build --release --no-default-features --features json-rpc
    endif
  endif
endfunction

" Language related plugins
Plug 'euclio/vim-markdown-composer', { 'do': function('BuildComposer') }
Plug 'pangloss/vim-javascript', { 'for' : ['javascript', 'typescript'] }
Plug 'lervag/vimtex', { 'for' : ['latex', 'tex'] }
Plug 'plasticboy/vim-markdown', { 'for' : 'markdown' }
Plug 'mzlogin/vim-markdown-toc', { 'for' : 'markdown' }
Plug 'jalvesaq/Nvim-R', { 'for' : 'r' }
Plug 'Shougo/neco-vim', { 'for' : 'vim' }
Plug 'tmhedberg/simpylfold', { 'for' : 'python' } " Adequate Python folding
Plug 'Vimjas/vim-python-pep8-indent', { 'for' : 'python' }
Plug 'tpope/vim-endwise', { 'for' : ['ruby', 'vim', 'lua'] }
Plug 'neomutt/neomutt.vim'

"  General functionnality
Plug 'w0rp/ale' " Check style and syntax asynchronously
Plug 'roxma/nvim-completion-manager'
Plug 'roxma/ncm-github'
" Plug 'roxma/python-support.nvim'
Plug 'tpope/vim-repeat'
Plug 'blindFS/vim-taskwarrior'
Plug 'lifepillar/vim-solarized8'
Plug 'Shougo/denite.nvim', { 'do' : ':UpdateRemotePlugins' }
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'junegunn/goyo.vim' " Focused writing
Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

" Display various info in lowerbar
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Give vim some note taking abilities
Plug 'xolox/vim-misc'
Plug 'xolox/vim-notes'

" Development
Plug '~/Codecave/transcribe.nvim', { 'for': ['text', 'markdown'] }
Plug '~/Codecave/ncm-R'
" Plug 'gaalcaras/transcribe.nvim', { 'do': './install' }

" Text & code manipulation
Plug 'tpope/vim-surround'
Plug 'ConradIrwin/vim-bracketed-paste' " Set 'set:paste' in insert mode
Plug 'scrooloose/nerdcommenter'
Plug 'raimondi/delimitmate' " Handle delimiters automatically
Plug 'tpope/vim-abolish' " Add improved support for abbreviations
Plug 'junegunn/vim-easy-align'

call plug#end() " Add plugins to &runtimepath

" =======
" Plugins
" =======

" Denite
call denite#custom#source('file_rec', 'matchers',
  \ ['matcher_fuzzy', 'matcher_ignore_globs'])
call denite#custom#filter('matcher_ignore_globs', 'ignore_globs',
  \ [ '.git/', '.ropeproject/', '__pycache__/',
  \   '*.png', '*.pdf', '*.jpg', '*.aux', '*.out',
  \   '.Rproj.user/*', '.~lock*', '.Rhistory',
  \   'venv/', 'images/', '*.min.*', 'img/', 'fonts/'])

" Solarized
if !exists('g:colors_name') || g:colors_name !=# 'solarized8_dark'
  colorscheme solarized8_dark
endif

" nvim-completion-manager
set shortmess+=c
let g:cm_matcher = {'module': 'cm_matchers.substr_matcher',
      \'case': 'smartcase'}

" Surround
let g:surround_no_mappings = 1 " Disable default mappings

nmap ds  <Plug>Dsurround
nmap ys  <Plug>Ysurround
nmap yS  <Plug>YSurround
nmap yss <Plug>Yssurround
nmap ySs <Plug>YSsurround
nmap ls  <Plug>Csurround
nmap lS  <Plug>CSurround
xmap S   <Plug>VSurround
xmap gS  <Plug>VgSurround

" Airline
let g:airline_powerline_fonts = 1
let g:airline_theme = 'base16_solarized'
let g:airline#extensions#tabline#enabled = 1 " Display buffers as tabs on top

" Delimitmate
let g:delimitMate_expand_cr = 1 " Correct indentation

" Nvim-R
let g:r_syntax_folding = 1
let g:R_assign = 0 " Do not expand _ to <-
let g:R_clear_line = 1 " Always clear line in the R Console

" Vim Markdown
let g:vim_markdown_folding_level = 2

" vimtex
let g:vimtex_fold_enabled = 1
let g:vimtex_quickfix_latexlog = {'fix_paths':0}

augroup vimtex_config
  au!
  au User VimtexEventQuit     VimtexClean " Clean aux files after quitting
  au User VimtexEventInitPost VimtexCompile " Open pdf when opening
augroup END

" Fugitive
set diffopt+=vertical " Force vertical split event on small screens
let g:fugitive_git_executable = 'LANG=en_US git' " Force git english

" Gitgutter
nmap (c [c
nmap )c ]c

" vim-notes
let g:notes_directories = ['~/Zettelkasten/zettel']
let g:notes_new_note_template = '~/Zettelkasten/new_zettel'
let g:notes_title_sync = 'rename_file'

" Transcribe
imap <silent><buffer> <C-S> <plug>(transcribe-speed-inc)
nmap <silent><buffer> <leader>s <plug>(transcribe-speed-inc)
imap <silent><buffer> <C-t> <plug>(transcribe-speed-dec)
nmap <silent><buffer> <leader>t <plug>(transcribe-speed-dec)
imap <silent><buffer> <C-c> <plug>(transcribe-seek-backward)
nmap <silent><buffer> <leader>c <plug>(transcribe-seek-backward)
imap <silent><buffer> <C-r> <plug>(transcribe-seek-forward)
nmap <silent><buffer> <leader>r <plug>(transcribe-seek-forward)
imap <silent><buffer> <C-v> <plug>(transcribe-timepos-get)
imap <silent><buffer> <C-p> <plug>(transcribe-sync)

" vim-easy-align
vmap <Enter> <Plug>(LiveEasyAlign)
nmap ga <Plug>(LiveEasyAlign)

" nerdcommenter
let g:NERDSpaceDelims = 1
let g:NERDDefaultAlign = 'left'
let g:NERDTrimTrailingWhitespace = 1

" ALE
nmap <silent> <C-t> <Plug>(ale_previous_wrap)
nmap <silent> <C-s> <Plug>(ale_next_wrap)

" UltiSnips
let g:UltiSnipsExpandTrigger='<tab>'
let g:UltiSnipsListSnippets='<c-tab>'
let g:UltiSnipsJumpForwardTrigger='<tab>'
let g:UltiSnipsJumpBackwardTrigger='<s-tab>'
let g:UltiSnipsEditSplit='vertical'
let g:UltiSnipsSnippetsDir='.vim/myownsnips'
let g:UltiSnipsSnippetDirectories=['UltiSnips', 'myownsnips']


" ==================
" French bépo layout
" ==================

" Text objects
noremap é w
noremap É W
onoremap aé aw
onoremap aÉ aW
onoremap ié iw
onoremap iÉ iW

" Easier pane navigation
noremap w <C-w>
noremap W <C-w><C-w>
noremap wt <C-w>j
noremap ws <C-w>k
noremap wc <C-w>h
noremap wr <C-w>l
noremap wd <C-w>c
noremap wo <C-w>s
noremap wp <C-w>o
noremap w<SPACE> :split<CR>
noremap w<CR> :vsplit<CR>

" [HJKL] -> {CTSR}
noremap c h
noremap r l
noremap t j
noremap s k
noremap C H
noremap R L
noremap gs gk
noremap gt gj
noremap gb gT
noremap gé gt
noremap g" g0

" {JK} -> {TS}
noremap T J
noremap S K

" Screen shifting
noremap zs zb
noremap zt zt

" {J}
noremap j t
noremap J T

" {L}
noremap l c
noremap L C

" {H}
noremap h r
noremap H R

" {K}
noremap k s
noremap K S

" Spellcheck
noremap ]k ]s
noremap [k [s

" Indentation
noremap « <
noremap » >

" Netwr
augroup netrw_mapping
  autocmd!
  autocmd filetype netrw call NetrwMapping()
augroup END
inoremap <c-g> <esc>/[)}*"»'`\]*]<cr>:nohl<cr>a

function! NetrwMapping()
  noremap <buffer> c h
  noremap <buffer> r l
  noremap <buffer> t j
  noremap <buffer> s k
endfunction

" ========
" Hardmode
" ========

command! ToggleDisablingOfNonCountedBasicMotions
      \ :call dotfiles#ToggleDisablingOfBasicMotionsIfNonCounted()
command! DisableNonCountedBasicMotions
      \ :call dotfiles#SetDisablingOfBasicMotionsIfNonCounted(1)
command! EnableNonCountedBasicMotions
      \ :call dotfiles#SetDisablingOfBasicMotionsIfNonCounted(0)

augroup hardmode
  autocmd!
  autocmd VimEnter * DisableNonCountedBasicMotions
augroup END

" Never use arrow keys ;-)
noremap <Left> :echoe "Use c ;-)"<CR>
noremap <Right> :echoe "Use r ;-)"<CR>
noremap <Up> :echoe "Use s ;-)"<CR>
noremap <Down> :echoe "Use t ;-)"<CR>

" Say goodbye to backspace and delete in Insert mode
inoremap <BS> <Nop>
inoremap <Del> <Nop>
