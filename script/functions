#!/usr/bin/env bash
#
# Install all dependencies

# ############################
# Color management and setup
# ############################

red=`tput setaf 1`
yellow=`tput setaf 3`
blue=`tput setaf 4`
mage=`tput setaf 5`
reset=`tput sgr0`

# Output messages in magenta
function msg {
  echo "${mage}$1${reset}"
}

function doing {
  echo "${blue}> $1...${reset}"
}

function warning {
  echo "${red}$1.${reset}"
}

function header {
  clear
  echo "${yellow}################################"
  echo $1
  echo "################################${reset}"
  echo
}

# ############################
# Symlink (boostrap, install)
# ############################

function symlink {
  local src=$1 dst=$2 dir=$3

  local obj='File'
  local overwrite= backup= skip=
  local action=

  if [ "$dir" -eq "1" ]
  then
    obj='Directory'
  fi

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        msg "$obj already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      doing "Removing $dst"
      rm -rf "$dst"
    fi

    if [ "$backup" == "true" ]
    then
      doing "Moving $dst to ${dst}.backup"
      mv "$dst" "${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      doing "Skipping $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    doing "Linking $1 to $2"
    ln -s "$1" "$2"
  fi
}

# ############################
# Installation step
# ############################

function check_flavor {
  doing 'Checking your Linux flavor'

  response=`uname -a`
  do_install=''
  if [[ $response == *"ARCH"* ]]; then
    system='arch'
    pre_install=''
    do_install='pacman -S --noconfirm'
    msg "You're runningÂ ArchLinux. KISS!"
  elif [[ $response == *"Ubuntu"* ]]; then
    system='ubuntu'
    pre_install='apt-get update'
    do_install='apt-get install -y'
    msg "Your're running Ubuntu, mate."
  else
    system=''
    msg "Unknown Linux flavor here!"
  fi
}

function select_apps {
  apps=""

  for f in ./script/modules/*; do
    # source install file:
    # retrieve message var and install function
    . ./$f

    msg "$message"

    select yn in "Yes" "No"; do
      case $yn in
        Yes ) add_app; break;;
        No ) warning "Skipping install"; break;;
      esac
    done

    echo

  done
}

function install_apps {
  select_apps
  
  clear

  msg "You have selected the following apps to install:"
  echo $apps
  echo
  msg "Do you want to proceed?"
  warning "The installer won't ask for confirmation again"

  select yn in "Yes" "No"; do
    case $yn in
      Yes ) echo; $pre_install; $do_install $apps; break;;
      No ) warning "Skipping everything"; break;;
    esac
  done
}


# ############################
# Post-install step
# ############################

function niceties {
  apps=""

  for f in ./script/post/*; do
    # source install file:
    # retrieve message var and install function
    . ./$f

    msg "$message"

    select yn in "Yes" "No"; do
      case $yn in
        Yes ) post_install; break;;
        No ) warning "Skipping post-install"; break;;
      esac
    done

    echo

  done
}
