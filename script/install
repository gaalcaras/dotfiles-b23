#!/usr/bin/env bash
#
# Install all dependencies

cd "$(dirname "$0")/.." || return
DOTFILES_ROOT=$(pwd -P)
msg="$DOTFILES_ROOT/script/utils/msg"
editor=${EDITOR:-vi}
urun="sudo -u $(env | grep SUDO_USER | cut -d= -f 2)"

# ############################
# Script
# ############################

if [ "$EUID" -ne 0 ]; then
  $msg "warning" "Please, run this script with sudo ;-)"
  exit
fi

clear

$msg "header" 'Welcome to the dotfiles script installer'
echo 'This script will set you up in minutes with the following steps:'
echo '1/ Installing or updating apps'
echo '2/ Linking your dotfiles (symlink script)'
echo '3/ Post-install niceties (updating vim plugins, ssh keygen, etc.)'
echo

$msg 'Are you ready?'

select yn in "Hell yeah" "No, see ya later"; do
  case $yn in
    "Hell yeah" ) clear; break;;
    "No, see ya later" ) exit; break;;
  esac
done

$msg "header" '0/ GPG keys'

echo

$msg "Do you want to import your GPG key on this machine?"

function import_gpg {
  $msg "header" '0/ GPG keys'
  echo
  echo "First, export your GPG private key using a secure random password"
  echo "and write it to a USB drive:"
  echo ""
  $msg "gpg --armor --export-secret-keys YOUREMAILADDRESS | gpg --armor --symmetric --output mykey.sec.asc"
  echo
  echo "Then, connect the drive to this computer."
  read -rn 1 -s -p "Press any key to continue..."
  $msg "header" '0/ GPG keys'
  lsblk
  echo
  $msg "Enter path of disk to mount (eg /dev/sdb1)"
  read -rn 15 diskpath
  echo
  $msg "doing" "Mounting disk"
  mkdir -p /mnt/gpgdisk && mount "$diskpath" /mnt/gpgdisk
  echo "List GPG keys:"
  $urun gpg --list-keys
  $msg "doing" "Importing keys"
  $urun gpg -d /mnt/gpgdisk/*.sec.asc | $urun gpg --import
  echo
  echo "List GPG keys:"
  $urun gpg --list-keys
  umount -R /mnt/gpgdisk
  $msg "doing" "Unlocking dotfiles"
  $urun git-crypt unlock
  read -rn 1 -s -p "Press any key to continue..."
}

select yn in "Yes" "No"; do
  case $yn in
    Yes ) echo; import_gpg; break;;
    No ) $msg "warning" "Skipping gpg key step"; break;;
  esac
done
echo

$msg "header" '1/ Installation'

echo

$msg "Do you want to (re)install apps on this machine?"

function install_apps {
  hash trizen 2>/dev/null || {
    $msg "doing" "Installing trizen"
    tritmp=$(mktemp -du /tmp/XXXXXtrizen)
    $urun git clone https://aur.archlinux.org/trizen.git "$tritmp"
    echo "$tritmp"
    cd "$tritmp" || return
    $urun makepkg -si
  }

  pkgtmp=$($urun mktemp -u /tmp/XXXXXpackages)
  $msg "doing" "Installing packages"
  $urun cp "$DOTFILES_ROOT/script/packages.txt" "$pkgtmp"
  $urun "$editor" "$pkgtmp"
  pacman -Sy --needed $(sed "s/#.*$//" "$pkgtmp")

  aurtmp=$($urun mktemp -u /tmp/XXXXXaur)
  $msg "doing" "Installing AUR packages"
  $urun cp "$DOTFILES_ROOT/script/aur.txt" "$aurtmp"
  $urun "$editor" "$aurtmp"
  $urun trizen -Sy --needed --noedit --noinfo $(sed "s/#.*$//" "$aurtmp")
}

select yn in "Yes" "No"; do
  case $yn in
    Yes ) echo; install_apps; break;;
    No ) $msg "warning" "Skipping installation step"; break;;
  esac
done
echo

$msg "header" '2/ Symlink script'

$msg 'Do you want to symlink your dotfiles now?'

select yn in "Yes" "No"; do
  case $yn in
    Yes ) echo; $urun $DOTFILES_ROOT/script/symlink; break;;
    No ) $msg "warning" "Skipping dotfiles step"; break;;
  esac
done
echo

$msg "header" '3/ Post-installation niceties'

echo 'This step takes care of some niceties for you,'
echo 'including installing vim-plug and updating plugins,'
echo 'installing spell check in vim, ssh-keygen, and more.'
echo

$msg 'Do you want to execute the post-install scripts?'

select yn in "Yes" "No"; do
  case $yn in
    Yes ) echo; $DOTFILES_ROOT/script/utils/post_install; break;;
    No ) $msg "warning" "Skipping post install step"; break;;
  esac
done

$msg "header" 'Install script over \o/'

echo "Don't forget to:"
echo "+ Clone your password-store repo"
echo "+ Make zsh your default shell (chsh -l / chsh -s)"
echo "+ Use your SSH keys (public keys are in your home dir)"
echo
$msg "Go back to being awesome"
