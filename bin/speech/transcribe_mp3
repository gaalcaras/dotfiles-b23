#!/usr/bin/env python3
"""Transcribing mp3 to a txt file"""

import argparse
import sys
import os
import wave
import subprocess
import json
import datetime

from vosk import Model, KaldiRecognizer, SetLogLevel

def log(message):
    """Print formatted log message"""
    print(f'{datetime.datetime.now()} :: {message}')

def process_rec_result(vosk_record):
    """Process Vosk Rec result"""
    result = json.loads(vosk_record)
    result_txt = f"{result['result'][0]['start']} > {result['text']}"
    log(f"VOSK: {result_txt}")
    return f"{result_txt}\n"

SetLogLevel(-1)

parser = argparse.ArgumentParser(add_help=False)
parser.add_argument(
    '-m', '--model', type=str, metavar='MODEL_PATH',
    default=os.path.join(os.path.expandvars("$HOME"), ".config", "vosk", "en",
                         "heavy"),
    help='Path to the model')
parser.add_argument(
    'file', type=str,
    help='Audio file to transcribe')
parser.add_argument(
    '-r', '--samplerate', type=int, default=16000, help='sampling rate')

parser = argparse.ArgumentParser(
    description=__doc__,
    formatter_class=argparse.RawDescriptionHelpFormatter,
    parents=[parser])

ARGS = parser.parse_args()

sample_rate = ARGS.samplerate
model_path = ARGS.model

target_file = ARGS.file
converted_file = f'{os.path.splitext(target_file)[0]}_{sample_rate}.wav'

if not os.path.exists(converted_file):
    log(f"Exporting file {converted_file} to match sample_rate...")
    subprocess.run(['ffmpeg', '-loglevel', 'quiet',
                    '-i', target_file, converted_file,
                    '-ar', str(sample_rate) , '-ac', '1', '-f', 's16le', '-'],
                   stdout=subprocess.PIPE, check=True)

log(f"Loading vosk model {model_path}")
rec = KaldiRecognizer(Model(model_path), sample_rate)
rec.SetWords(True)

wf = wave.open(converted_file, "rb")
if wf.getnchannels() != 1 or wf.getsampwidth() != 2 or wf.getcomptype() != "NONE":
    log("Audio file must be WAV format mono PCM.")
    sys.exit (1)

TEXT = ''

log("Start speech recognition...")
while True:
    data = wf.readframes(4000)
    if len(data) == 0:
        break
    if rec.AcceptWaveform(data):
        TEXT += process_rec_result(rec.Result())

TEXT += process_rec_result(rec.FinalResult())

transcript = f'{os.path.splitext(target_file)[0]}.txt'

log(f"Writing transcript to {transcript}")
with open(transcript, 'w+', encoding='utf-8') as f:
    f.writelines(TEXT)

log("Transcription over!")
